/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: Swagger Petstore
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package com.example.chotuve_android_client.apis

import com.example.chotuve_android_client.models.User
import io.reactivex.Completable
import io.reactivex.Single
import retrofit2.http.DELETE
import retrofit2.http.GET
import retrofit2.http.Headers
import retrofit2.http.POST
import retrofit2.http.PUT

@JvmSuppressWildcards
interface UserApi {
    /**
     * Create user
     * This can only be done by the logged in user.
     * The endpoint is owned by defaultname service owner
     * @param body Created user object (required)
     */
    @Headers(
        "X-Operation-ID: createUser",
      "Content-Type: application/json"
    )
    @POST("user")
    fun createUser(
        @retrofit2.http.Body body: User
    ): Completable
    /**
     * Creates list of users with given input array
     * 
     * The endpoint is owned by defaultname service owner
     * @param body List of user object (required)
     */
    @Headers(
        "X-Operation-ID: createUsersWithArrayInput",
      "Content-Type: application/json"
    )
    @POST("user/createWithArray")
    fun createUsersWithArrayInput(
        @retrofit2.http.Body body: List<User>
    ): Completable
    /**
     * Creates list of users with given input array
     * 
     * The endpoint is owned by defaultname service owner
     * @param body List of user object (required)
     */
    @Headers(
        "X-Operation-ID: createUsersWithListInput",
      "Content-Type: application/json"
    )
    @POST("user/createWithList")
    fun createUsersWithListInput(
        @retrofit2.http.Body body: List<User>
    ): Completable
    /**
     * Delete user
     * This can only be done by the logged in user.
     * The endpoint is owned by defaultname service owner
     * @param username The name that needs to be deleted (required)
     */
    @Headers(
        "X-Operation-ID: deleteUser"
    )
    @DELETE("user/{username}")
    fun deleteUser(
        @retrofit2.http.Path("username") username: String
    ): Completable
    /**
     * Get user by user name
     * 
     * The endpoint is owned by defaultname service owner
     * @param username The name that needs to be fetched. Use user1 for testing.  (required)
     */
    @Headers(
        "X-Operation-ID: getUserByName"
    )
    @GET("user/{username}")
    fun getUserByName(
        @retrofit2.http.Path("username") username: String
    ): Single<User>
    /**
     * Logs user into the system
     * 
     * The endpoint is owned by defaultname service owner
     * @param username The user name for login (required)
     * @param password The password for login in clear text (required)
     */
    @Headers(
        "X-Operation-ID: loginUser"
    )
    @GET("user/login")
    fun loginUser(
        @retrofit2.http.Query("username") username: String,
        @retrofit2.http.Query("password") password: String
    ): Single<String>
    /**
     * Logs out current logged in user session
     * 
     * The endpoint is owned by defaultname service owner
     */
    @Headers(
        "X-Operation-ID: logoutUser"
    )
    @GET("user/logout")
    fun logoutUser(): Completable
    /**
     * Updated user
     * This can only be done by the logged in user.
     * The endpoint is owned by defaultname service owner
     * @param username name that need to be updated (required)
     * @param body Updated user object (required)
     */
    @Headers(
        "X-Operation-ID: updateUser",
      "Content-Type: application/json"
    )
    @PUT("user/{username}")
    fun updateUser(
        @retrofit2.http.Path("username") username: String,
        @retrofit2.http.Body body: User
    ): Completable
}
